import os
import sys
import sqlite3
import threading
import time
from concurrent.futures import ThreadPoolExecutor, as_completed

if sys.platform == "win32":
    try:
        from colorama import init
        init()
    except ImportError:
        import ctypes
        kernel32 = ctypes.windll.kernel32
        kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)

def type_print(text, delay=0.01):
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()

print_lock = threading.Lock()

def search_in_db(db_path, query):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]

        for table in tables:
            try:
                cursor.execute(f"PRAGMA table_info(`{table}`);")
                columns = [col[1] for col in cursor.fetchall()]
                if not columns:
                    continue

                safe_columns = [f"`{col}`" for col in columns]
                like_conditions = [f"{col} LIKE ?" for col in safe_columns]
                sql = f"SELECT * FROM `{table}` WHERE " + " OR ".join(like_conditions)
                params = [f"%{query}%"] * len(columns)

                cursor.execute(sql, params)
                rows = cursor.fetchall()

                if rows:
                    with print_lock:
                        type_print(f"\n\033[93m[+] –ù–∞–π–¥–µ–Ω–æ –≤ {db_path} ‚Üí —Ç–∞–±–ª–∏—Ü–∞ `{table}`:\033[0m")
                        for row in rows:
                            type_print(f"    üìå {row}")
            except sqlite3.Error as e:
                with print_lock:
                    type_print(f"\033[91m[!] –û—à–∏–±–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table} ({db_path}): {e}\033[0m")
        conn.close()
    except Exception as e:
        with print_lock:
            type_print(f"\033[91m[!] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ë–î {db_path}: {e}\033[0m")

def search_in_text_file(file_path, query):
    try:
        with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
            lines = f.readlines()

        found = False
        for i, line in enumerate(lines, 1):
            if query.lower() in line.lower():
                if not found:
                    with print_lock:
                        type_print(f"\n\033[93m[+] –ù–∞–π–¥–µ–Ω–æ –≤ {file_path}:\033[0m")
                    found = True
                with print_lock:
                    type_print(f"    üìå –°—Ç—Ä–æ–∫–∞ {i}: {line.strip()}")
    except Exception as e:
        with print_lock:
            type_print(f"\033[91m[!] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}\033[0m")

def main():
    db_folder = os.path.join(os.getcwd(), "DataBase")
    
    if not os.path.exists(db_folder):
        type_print(f"\033[93m[!] –ü–∞–ø–∫–∞ 'DataBase' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—ë–º...\033[0m")
        os.makedirs(db_folder)
        type_print(f"\033[92m[‚úì] –ü–∞–ø–∫–∞ 'DataBase' —Å–æ–∑–¥–∞–Ω–∞. –ü–æ–ª–æ–∂–∏—Ç–µ —Ç—É–¥–∞ —Å–≤–æ–∏ —Ñ–∞–π–ª—ã.\033[0m")

    supported_exts = (
        '.db', '.sqlite', '.sqlite3', '.txt', '.csv', '.json', '.html', '.xml',
        '.log', '.md', '.sql', '.yml', '.yaml', '.ini', '.cfg', '.dat'
    )

    while True:
        type_print("\n" + "="*60)
        query = input("\033[96müîç –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): \033[0m").strip()

        if query.lower() in ('exit', 'quit', '–≤—ã—Ö–æ–¥'):
            type_print("\033[92m[‚úì] –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã\033[0m")
            break

        if not query:
            type_print("\033[91m[-] –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\033[0m")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            continue

        if not os.path.exists(db_folder):
            type_print("\033[91m[-] –ü–∞–ø–∫–∞ DataBase –∏—Å—á–µ–∑–ª–∞!\033[0m")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
            continue

        files = []
        for file in os.listdir(db_folder):
            full_path = os.path.join(db_folder, file)
            if os.path.isfile(full_path) and file.endswith(supported_exts):
                files.append(full_path)

        if not files:
            type_print(f"\033[91m[-] –í –ø–∞–ø–∫–µ 'DataBase' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏.\033[0m")
            type_print(f"    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(supported_exts)}")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            continue

        type_print(f"\n\033[92m[+] –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª(–æ–≤) –≤ –ø–∞–ø–∫–µ 'DataBase'. –ò—â–µ–º '{query}'...\033[0m")

        with ThreadPoolExecutor(max_workers=32) as executor:
            futures = []
            for file_path in files:
                if file_path.endswith(('.db', '.sqlite', '.sqlite3')):
                    futures.append(executor.submit(search_in_db, file_path, query))
                else:
                    futures.append(executor.submit(search_in_text_file, file_path, query))

            for future in as_completed(futures):
                try:
                    future.result()
                except Exception as e:
                    with print_lock:
                        type_print(f"\033[91m[!] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}\033[0m")

        type_print("\n\033[92m[‚úì] –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.\033[0m")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        type_print("\n\n\033[93m[!] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\033[0m")
    finally:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...")